//Fibonacci
/*
题意： 给一个n，由f[0]=0,f[1]=1;f[i] = f[i-1]+f[i-2]求f[n]的前四位，0 <= n <= 1e8
	因为这个n太大，肯定不能老实套公式打表(数组不能开太大)，不然空间就超了 
	用对数知识：已知斐波那契方程为f[n]=1.0/x*(pow((1+x)/2,n)-pow((1-x)/2,n)	，,x=sqrt(5); 
		(1-x)/2=0.6，再n次方肯定小于1，所以在n一定大的时候就可以忽视(为了方便这里在n有5位的时候忽视)
		1.0/x*pow((1+x)/2,n)太大，已知任意n=x*10^m，这里用科学计数法表示	 
		y=log10(n)=log10(1/x)+n*log10((1+x)/2)，直接将数的大小压缩了很多
		y-=(int)y去掉整数部分，即10^m的部分 
*/	
#include<bits/stdc++.h>
const double x=sqrt(5);
using namespace std;
int main()
{
	double n;
	while(~scanf("%lf",&n)){
		if(n<21){		//事先打表知20 6765 21 10946，超过20后后面那个小于1的式子就没用了 
			n=1.0/x*(pow((1+x)/2,n)-pow((1-x)/2,n));
		}
		else{
			double y=log10(1/x)+n*log10((1+x)/2);	
			y-=(int)y;	//去掉整数部分m 
			n=(int)(pow(10,y)*1000);	//注意：这里要强制类型转换，不然会四舍五入	
		}								//并且n要乘以1000，所以不到3位的答案也不能执行 
		printf("%.0lf\n",n);
	}
}
